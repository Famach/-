#include "lab5.h"
#include <iostream>

namespace lab05 {
    void runDemo() {
        setlocale(LC_ALL, "Rus");

        int iSize1{ 0 }, iSize2{ 0 };

        std::cout << "Введите размер первого вектора: ";
        std::cin >> iSize1;
        std::cout << "Введите размер второго вектора: ";
        std::cin >> iSize2;

        if (iSize1 != iSize2) {
            std::cerr << "Размеры векторов должны быть одинаковыми для выполнения операций." << std::endl;
            return;
        }

        VECTOR v1(iSize1), v2(iSize2);

        // Заполнение первого вектора
        std::cout << "Введите элементы первого вектора: " << std::endl;
        std::cin >> v1;

        // Заполнение второго вектора
        std::cout << "Введите элементы второго вектора: " << std::endl;
        std::cin >> v2;

        // Демонстрация перегруженного оператора +
        VECTOR sum = v1 + v2;
        std::cout << "Результат сложения векторов (оператор +):" << std::endl;
        std::cout << sum << std::endl;

        // Демонстрация перегруженного оператора *
        float dotProduct = v1 * v2;
        std::cout << "Результат скалярного произведения (оператор *): " << dotProduct << std::endl;

        // Демонстрация перегруженной функции Add для прибавления скаляра
        VECTOR scalarAdded = v1.Add(5.0f);
        std::cout << "Результат добавления скаляра 5 ко всем элементам вектора:" << std::endl;
        std::cout << scalarAdded << std::endl;

        // Проверка оператора []
        std::cout << "Элемент v1[0]: " << v1[0] << std::endl;

        // Проверка функции-функтора
        std::cout << "Элемент v2(1): " << v2(1) << std::endl;

        // Использование оператора присваивания
        VECTOR v3 = v1; // Вызов оператора присваивания (копирующего)
        std::cout << "Результат копирования v1 в v3 с помощью оператора присваивания:" << std::endl;
        std::cout << v3 << std::endl;

        // Использование оператора присваивания по перемещению
        VECTOR v4 = std::move(v2); // Вызов оператора присваивания по перемещению
        std::cout << "Результат перемещения v2 в v4 с помощью оператора присваивания по перемещению:" << std::endl;
        std::cout << v4 << std::endl;

        // Проверка, что v2 теперь "пустой" (вектор с нулевым размером)
        try {
            std::cout << "Попытка доступа к v2[0]: " << v2[0] << std::endl;
        }
        catch (const std::out_of_range& e) {
            std::cerr << "Ошибка: " << e.what() << std::endl;
        }
    }
}
